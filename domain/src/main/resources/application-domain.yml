spring:
  config:
    activate:
      on-profile: dev

  jpa:
    generate-ddl: false
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    hibernate:
      ddl-auto: validate # 코드와 실제 테이블이 일치하는가 판단 (docker로 띄웠기때문에 create-drop은 사용하지 않음)
      naming:
        # 데이터의 대소문자를 구분하는 설정
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/fintech?characterEncoding=UTF-8&serverTimezone=Asia/Seoul
    username: fintech
    password: fintech

  redis:
    host: localhost
    port: 6379

  kafka:
    consumer:
      bootstrap-servers: localhost:9092
    producer:
      bootstrap-servers: localhost:9092

css:
  url: http://localhost:8081/css/api/v1/request


---
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    show-sql: false
    properties:
      hibernate:
        format_sql: false

  datasource:
    url: jdbc:mysql://fintech-mysql:3306/fintech?characterEncoding=UTF-8&serverTimezone=Asia/Seoul

  redis:
    host: fintech-redis

  kafka:
    consumer:
      bootstrap-servers: kafka:9092
    producer:
      bootstrap-servers: kafka:9092

css:
  # proxy server(nginx)를 통해서 css api를 호출하기 때문에 nginx로 보낸다.
  url: http://nginx:8085/css/api/v1/request

